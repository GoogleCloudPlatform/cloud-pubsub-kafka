// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loadtest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Pubsub.Loadtest
{

    /// <summary>Holder for reflection information generated from loadtest.proto</summary>
    public static partial class LoadtestReflection
    {

        #region Descriptor
        /// <summary>File descriptor for loadtest.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static LoadtestReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg5sb2FkdGVzdC5wcm90bxIWZ29vZ2xlLnB1YnN1Yi5sb2FkdGVzdBoeZ29v",
                  "Z2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGh9nb29nbGUvcHJvdG9idWYv",
                  "dGltZXN0YW1wLnByb3RvIqgECgxTdGFydFJlcXVlc3QSDwoHcHJvamVjdBgB",
                  "IAEoCRINCgV0b3BpYxgCIAEoCRIUCgxyZXF1ZXN0X3JhdGUYAyABKAUSFAoM",
                  "bWVzc2FnZV9zaXplGAQgASgFEiAKGG1heF9vdXRzdGFuZGluZ19yZXF1ZXN0",
                  "cxgFIAEoBRIuCgpzdGFydF90aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVm",
                  "LlRpbWVzdGFtcBIzChBidXJuX2luX2R1cmF0aW9uGAwgASgLMhkuZ29vZ2xl",
                  "LnByb3RvYnVmLkR1cmF0aW9uEhoKEnB1Ymxpc2hfYmF0Y2hfc2l6ZRgLIAEo",
                  "BRI5ChZwdWJsaXNoX2JhdGNoX2R1cmF0aW9uGA0gASgLMhkuZ29vZ2xlLnBy",
                  "b3RvYnVmLkR1cmF0aW9uEjIKDXRlc3RfZHVyYXRpb24YByABKAsyGS5nb29n",
                  "bGUucHJvdG9idWYuRHVyYXRpb25IABIcChJudW1iZXJfb2ZfbWVzc2FnZXMY",
                  "CCABKAVIABI/Cg5wdWJzdWJfb3B0aW9ucxgJIAEoCzIlLmdvb2dsZS5wdWJz",
                  "dWIubG9hZHRlc3QuUHVic3ViT3B0aW9uc0gBEj0KDWthZmthX29wdGlvbnMY",
                  "CiABKAsyJC5nb29nbGUucHVic3ViLmxvYWR0ZXN0LkthZmthT3B0aW9uc0gB",
                  "QhEKD3N0b3BfY29uZGl0aW9uc0IJCgdvcHRpb25zIg8KDVN0YXJ0UmVzcG9u",
                  "c2UiRAoNUHVic3ViT3B0aW9ucxIUCgxzdWJzY3JpcHRpb24YASABKAkSHQoV",
                  "bWF4X21lc3NhZ2VzX3Blcl9wdWxsGAIgASgFIp4BCgxLYWZrYU9wdGlvbnMS",
                  "DgoGYnJva2VyGAEgASgJEjAKDXBvbGxfZHVyYXRpb24YAiABKAsyGS5nb29n",
                  "bGUucHJvdG9idWYuRHVyYXRpb24SHAoUem9va2VlcGVyX2lwX2FkZHJlc3MY",
                  "AyABKAkSGgoScmVwbGljYXRpb25fZmFjdG9yGAQgASgFEhIKCnBhcnRpdGlv",
                  "bnMYBSABKAUiSQoRTWVzc2FnZUlkZW50aWZpZXISGwoTcHVibGlzaGVyX2Ns",
                  "aWVudF9pZBgBIAEoAxIXCg9zZXF1ZW5jZV9udW1iZXIYAiABKAUiTQoMQ2hl",
                  "Y2tSZXF1ZXN0Ej0KCmR1cGxpY2F0ZXMYASADKAsyKS5nb29nbGUucHVic3Vi",
                  "LmxvYWR0ZXN0Lk1lc3NhZ2VJZGVudGlmaWVyIrYBCg1DaGVja1Jlc3BvbnNl",
                  "EhUKDWJ1Y2tldF92YWx1ZXMYASADKAMSMwoQcnVubmluZ19kdXJhdGlvbhgC",
                  "IAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhITCgtpc19maW5pc2hl",
                  "ZBgDIAEoCBJEChFyZWNlaXZlZF9tZXNzYWdlcxgEIAMoCzIpLmdvb2dsZS5w",
                  "dWJzdWIubG9hZHRlc3QuTWVzc2FnZUlkZW50aWZpZXIiEAoORXhlY3V0ZVJl",
                  "cXVlc3QiagoPRXhlY3V0ZVJlc3BvbnNlEhEKCWxhdGVuY2llcxgBIAMoAxJE",
                  "ChFyZWNlaXZlZF9tZXNzYWdlcxgCIAMoCzIpLmdvb2dsZS5wdWJzdWIubG9h",
                  "ZHRlc3QuTWVzc2FnZUlkZW50aWZpZXIytgEKCExvYWR0ZXN0ElQKBVN0YXJ0",
                  "EiQuZ29vZ2xlLnB1YnN1Yi5sb2FkdGVzdC5TdGFydFJlcXVlc3QaJS5nb29n",
                  "bGUucHVic3ViLmxvYWR0ZXN0LlN0YXJ0UmVzcG9uc2USVAoFQ2hlY2sSJC5n",
                  "b29nbGUucHVic3ViLmxvYWR0ZXN0LkNoZWNrUmVxdWVzdBolLmdvb2dsZS5w",
                  "dWJzdWIubG9hZHRlc3QuQ2hlY2tSZXNwb25zZTLCAQoOTG9hZHRlc3RXb3Jr",
                  "ZXISVAoFU3RhcnQSJC5nb29nbGUucHVic3ViLmxvYWR0ZXN0LlN0YXJ0UmVx",
                  "dWVzdBolLmdvb2dsZS5wdWJzdWIubG9hZHRlc3QuU3RhcnRSZXNwb25zZRJa",
                  "CgdFeGVjdXRlEiYuZ29vZ2xlLnB1YnN1Yi5sb2FkdGVzdC5FeGVjdXRlUmVx",
                  "dWVzdBonLmdvb2dsZS5wdWJzdWIubG9hZHRlc3QuRXhlY3V0ZVJlc3BvbnNl",
                  "Qi4KHWNvbS5nb29nbGUucHVic3ViLmZsaWMuY29tbW9uQg1Mb2FkdGVzdFBy",
                  "b3RvYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.StartRequest), global::Google.Pubsub.Loadtest.StartRequest.Parser, new[]{ "Project", "Topic", "RequestRate", "MessageSize", "MaxOutstandingRequests", "StartTime", "BurnInDuration", "PublishBatchSize", "PublishBatchDuration", "TestDuration", "NumberOfMessages", "PubsubOptions", "KafkaOptions" }, new[]{ "StopConditions", "Options" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.StartResponse), global::Google.Pubsub.Loadtest.StartResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.PubsubOptions), global::Google.Pubsub.Loadtest.PubsubOptions.Parser, new[]{ "Subscription", "MaxMessagesPerPull" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.KafkaOptions), global::Google.Pubsub.Loadtest.KafkaOptions.Parser, new[]{ "Broker", "PollDuration", "ZookeeperIpAddress", "ReplicationFactor", "Partitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.MessageIdentifier), global::Google.Pubsub.Loadtest.MessageIdentifier.Parser, new[]{ "PublisherClientId", "SequenceNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.CheckRequest), global::Google.Pubsub.Loadtest.CheckRequest.Parser, new[]{ "Duplicates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.CheckResponse), global::Google.Pubsub.Loadtest.CheckResponse.Parser, new[]{ "BucketValues", "RunningDuration", "IsFinished", "ReceivedMessages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.ExecuteRequest), global::Google.Pubsub.Loadtest.ExecuteRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Pubsub.Loadtest.ExecuteResponse), global::Google.Pubsub.Loadtest.ExecuteResponse.Parser, new[]{ "Latencies", "ReceivedMessages" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class StartRequest : pb::IMessage<StartRequest>
    {
        private static readonly pb::MessageParser<StartRequest> _parser = new pb::MessageParser<StartRequest>(() => new StartRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StartRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartRequest(StartRequest other) : this()
        {
            project_ = other.project_;
            topic_ = other.topic_;
            requestRate_ = other.requestRate_;
            messageSize_ = other.messageSize_;
            maxOutstandingRequests_ = other.maxOutstandingRequests_;
            StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
            BurnInDuration = other.burnInDuration_ != null ? other.BurnInDuration.Clone() : null;
            publishBatchSize_ = other.publishBatchSize_;
            PublishBatchDuration = other.publishBatchDuration_ != null ? other.PublishBatchDuration.Clone() : null;
            switch (other.StopConditionsCase)
            {
                case StopConditionsOneofCase.TestDuration:
                    TestDuration = other.TestDuration.Clone();
                    break;
                case StopConditionsOneofCase.NumberOfMessages:
                    NumberOfMessages = other.NumberOfMessages;
                    break;
            }

            switch (other.OptionsCase)
            {
                case OptionsOneofCase.PubsubOptions:
                    PubsubOptions = other.PubsubOptions.Clone();
                    break;
                case OptionsOneofCase.KafkaOptions:
                    KafkaOptions = other.KafkaOptions.Clone();
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartRequest Clone()
        {
            return new StartRequest(this);
        }

        /// <summary>Field number for the "project" field.</summary>
        public const int ProjectFieldNumber = 1;
        private string project_ = "";
        /// <summary>
        ///  The GCP project. This must be set even for Kafka, as we use it to export metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Project
        {
            get { return project_; }
            set
            {
                project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "topic" field.</summary>
        public const int TopicFieldNumber = 2;
        private string topic_ = "";
        /// <summary>
        ///  The Pub/Sub or Kafka topic name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Topic
        {
            get { return topic_; }
            set
            {
                topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "request_rate" field.</summary>
        public const int RequestRateFieldNumber = 3;
        private int requestRate_;
        /// <summary>
        ///  The number of requests that can be made, each second, per client.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RequestRate
        {
            get { return requestRate_; }
            set
            {
                requestRate_ = value;
            }
        }

        /// <summary>Field number for the "message_size" field.</summary>
        public const int MessageSizeFieldNumber = 4;
        private int messageSize_;
        /// <summary>
        ///  The size of each user message to publish
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MessageSize
        {
            get { return messageSize_; }
            set
            {
                messageSize_ = value;
            }
        }

        /// <summary>Field number for the "max_outstanding_requests" field.</summary>
        public const int MaxOutstandingRequestsFieldNumber = 5;
        private int maxOutstandingRequests_;
        /// <summary>
        ///  The maximum outstanding requests, per client.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxOutstandingRequests
        {
            get { return maxOutstandingRequests_; }
            set
            {
                maxOutstandingRequests_ = value;
            }
        }

        /// <summary>Field number for the "start_time" field.</summary>
        public const int StartTimeFieldNumber = 6;
        private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
        /// <summary>
        ///  The time at which the load test should start. If this is less than the current time, we start immediately.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime
        {
            get { return startTime_; }
            set
            {
                startTime_ = value;
            }
        }

        /// <summary>Field number for the "burn_in_duration" field.</summary>
        public const int BurnInDurationFieldNumber = 12;
        private global::Google.Protobuf.WellKnownTypes.Duration burnInDuration_;
        /// <summary>
        ///  The burn-in duration, before which results should not be reported.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration BurnInDuration
        {
            get { return burnInDuration_; }
            set
            {
                burnInDuration_ = value;
            }
        }

        /// <summary>Field number for the "publish_batch_size" field.</summary>
        public const int PublishBatchSizeFieldNumber = 11;
        private int publishBatchSize_;
        /// <summary>
        ///  The number of user messages of size message_size to publish together.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PublishBatchSize
        {
            get { return publishBatchSize_; }
            set
            {
                publishBatchSize_ = value;
            }
        }

        /// <summary>Field number for the "publish_batch_duration" field.</summary>
        public const int PublishBatchDurationFieldNumber = 13;
        private global::Google.Protobuf.WellKnownTypes.Duration publishBatchDuration_;
        /// <summary>
        ///  The max duration for coalescing a batch of published messages.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration PublishBatchDuration
        {
            get { return publishBatchDuration_; }
            set
            {
                publishBatchDuration_ = value;
            }
        }

        /// <summary>Field number for the "test_duration" field.</summary>
        public const int TestDurationFieldNumber = 7;
        /// <summary>
        ///  The duration the load test should run for, after burn-in completes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration TestDuration
        {
            get { return stopConditionsCase_ == StopConditionsOneofCase.TestDuration ? (global::Google.Protobuf.WellKnownTypes.Duration)stopConditions_ : null; }
            set
            {
                stopConditions_ = value;
                stopConditionsCase_ = value == null ? StopConditionsOneofCase.None : StopConditionsOneofCase.TestDuration;
            }
        }

        /// <summary>Field number for the "number_of_messages" field.</summary>
        public const int NumberOfMessagesFieldNumber = 8;
        /// <summary>
        ///  The number of messages to publish or expect to receive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumberOfMessages
        {
            get { return stopConditionsCase_ == StopConditionsOneofCase.NumberOfMessages ? (int)stopConditions_ : 0; }
            set
            {
                stopConditions_ = value;
                stopConditionsCase_ = StopConditionsOneofCase.NumberOfMessages;
            }
        }

        /// <summary>Field number for the "pubsub_options" field.</summary>
        public const int PubsubOptionsFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Pubsub.Loadtest.PubsubOptions PubsubOptions
        {
            get { return optionsCase_ == OptionsOneofCase.PubsubOptions ? (global::Google.Pubsub.Loadtest.PubsubOptions)options_ : null; }
            set
            {
                options_ = value;
                optionsCase_ = value == null ? OptionsOneofCase.None : OptionsOneofCase.PubsubOptions;
            }
        }

        /// <summary>Field number for the "kafka_options" field.</summary>
        public const int KafkaOptionsFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Pubsub.Loadtest.KafkaOptions KafkaOptions
        {
            get { return optionsCase_ == OptionsOneofCase.KafkaOptions ? (global::Google.Pubsub.Loadtest.KafkaOptions)options_ : null; }
            set
            {
                options_ = value;
                optionsCase_ = value == null ? OptionsOneofCase.None : OptionsOneofCase.KafkaOptions;
            }
        }

        private object stopConditions_;
        /// <summary>Enum of possible cases for the "stop_conditions" oneof.</summary>
        public enum StopConditionsOneofCase
        {
            None = 0,
            TestDuration = 7,
            NumberOfMessages = 8,
        }
        private StopConditionsOneofCase stopConditionsCase_ = StopConditionsOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StopConditionsOneofCase StopConditionsCase
        {
            get { return stopConditionsCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStopConditions()
        {
            stopConditionsCase_ = StopConditionsOneofCase.None;
            stopConditions_ = null;
        }

        private object options_;
        /// <summary>Enum of possible cases for the "options" oneof.</summary>
        public enum OptionsOneofCase
        {
            None = 0,
            PubsubOptions = 9,
            KafkaOptions = 10,
        }
        private OptionsOneofCase optionsCase_ = OptionsOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OptionsOneofCase OptionsCase
        {
            get { return optionsCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOptions()
        {
            optionsCase_ = OptionsOneofCase.None;
            options_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as StartRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StartRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Project != other.Project) return false;
            if (Topic != other.Topic) return false;
            if (RequestRate != other.RequestRate) return false;
            if (MessageSize != other.MessageSize) return false;
            if (MaxOutstandingRequests != other.MaxOutstandingRequests) return false;
            if (!object.Equals(StartTime, other.StartTime)) return false;
            if (!object.Equals(BurnInDuration, other.BurnInDuration)) return false;
            if (PublishBatchSize != other.PublishBatchSize) return false;
            if (!object.Equals(PublishBatchDuration, other.PublishBatchDuration)) return false;
            if (!object.Equals(TestDuration, other.TestDuration)) return false;
            if (NumberOfMessages != other.NumberOfMessages) return false;
            if (!object.Equals(PubsubOptions, other.PubsubOptions)) return false;
            if (!object.Equals(KafkaOptions, other.KafkaOptions)) return false;
            if (StopConditionsCase != other.StopConditionsCase) return false;
            if (OptionsCase != other.OptionsCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Project.Length != 0) hash ^= Project.GetHashCode();
            if (Topic.Length != 0) hash ^= Topic.GetHashCode();
            if (RequestRate != 0) hash ^= RequestRate.GetHashCode();
            if (MessageSize != 0) hash ^= MessageSize.GetHashCode();
            if (MaxOutstandingRequests != 0) hash ^= MaxOutstandingRequests.GetHashCode();
            if (startTime_ != null) hash ^= StartTime.GetHashCode();
            if (burnInDuration_ != null) hash ^= BurnInDuration.GetHashCode();
            if (PublishBatchSize != 0) hash ^= PublishBatchSize.GetHashCode();
            if (publishBatchDuration_ != null) hash ^= PublishBatchDuration.GetHashCode();
            if (stopConditionsCase_ == StopConditionsOneofCase.TestDuration) hash ^= TestDuration.GetHashCode();
            if (stopConditionsCase_ == StopConditionsOneofCase.NumberOfMessages) hash ^= NumberOfMessages.GetHashCode();
            if (optionsCase_ == OptionsOneofCase.PubsubOptions) hash ^= PubsubOptions.GetHashCode();
            if (optionsCase_ == OptionsOneofCase.KafkaOptions) hash ^= KafkaOptions.GetHashCode();
            hash ^= (int)stopConditionsCase_;
            hash ^= (int)optionsCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Project.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Project);
            }
            if (Topic.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Topic);
            }
            if (RequestRate != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(RequestRate);
            }
            if (MessageSize != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(MessageSize);
            }
            if (MaxOutstandingRequests != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(MaxOutstandingRequests);
            }
            if (startTime_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(StartTime);
            }
            if (stopConditionsCase_ == StopConditionsOneofCase.TestDuration)
            {
                output.WriteRawTag(58);
                output.WriteMessage(TestDuration);
            }
            if (stopConditionsCase_ == StopConditionsOneofCase.NumberOfMessages)
            {
                output.WriteRawTag(64);
                output.WriteInt32(NumberOfMessages);
            }
            if (optionsCase_ == OptionsOneofCase.PubsubOptions)
            {
                output.WriteRawTag(74);
                output.WriteMessage(PubsubOptions);
            }
            if (optionsCase_ == OptionsOneofCase.KafkaOptions)
            {
                output.WriteRawTag(82);
                output.WriteMessage(KafkaOptions);
            }
            if (PublishBatchSize != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(PublishBatchSize);
            }
            if (burnInDuration_ != null)
            {
                output.WriteRawTag(98);
                output.WriteMessage(BurnInDuration);
            }
            if (publishBatchDuration_ != null)
            {
                output.WriteRawTag(106);
                output.WriteMessage(PublishBatchDuration);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Project.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
            }
            if (Topic.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
            }
            if (RequestRate != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestRate);
            }
            if (MessageSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageSize);
            }
            if (MaxOutstandingRequests != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOutstandingRequests);
            }
            if (startTime_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
            }
            if (burnInDuration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BurnInDuration);
            }
            if (PublishBatchSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublishBatchSize);
            }
            if (publishBatchDuration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishBatchDuration);
            }
            if (stopConditionsCase_ == StopConditionsOneofCase.TestDuration)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestDuration);
            }
            if (stopConditionsCase_ == StopConditionsOneofCase.NumberOfMessages)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfMessages);
            }
            if (optionsCase_ == OptionsOneofCase.PubsubOptions)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PubsubOptions);
            }
            if (optionsCase_ == OptionsOneofCase.KafkaOptions)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(KafkaOptions);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StartRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Project.Length != 0)
            {
                Project = other.Project;
            }
            if (other.Topic.Length != 0)
            {
                Topic = other.Topic;
            }
            if (other.RequestRate != 0)
            {
                RequestRate = other.RequestRate;
            }
            if (other.MessageSize != 0)
            {
                MessageSize = other.MessageSize;
            }
            if (other.MaxOutstandingRequests != 0)
            {
                MaxOutstandingRequests = other.MaxOutstandingRequests;
            }
            if (other.startTime_ != null)
            {
                if (startTime_ == null)
                {
                    startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                StartTime.MergeFrom(other.StartTime);
            }
            if (other.burnInDuration_ != null)
            {
                if (burnInDuration_ == null)
                {
                    burnInDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                BurnInDuration.MergeFrom(other.BurnInDuration);
            }
            if (other.PublishBatchSize != 0)
            {
                PublishBatchSize = other.PublishBatchSize;
            }
            if (other.publishBatchDuration_ != null)
            {
                if (publishBatchDuration_ == null)
                {
                    publishBatchDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                PublishBatchDuration.MergeFrom(other.PublishBatchDuration);
            }
            switch (other.StopConditionsCase)
            {
                case StopConditionsOneofCase.TestDuration:
                    TestDuration = other.TestDuration;
                    break;
                case StopConditionsOneofCase.NumberOfMessages:
                    NumberOfMessages = other.NumberOfMessages;
                    break;
            }

            switch (other.OptionsCase)
            {
                case OptionsOneofCase.PubsubOptions:
                    PubsubOptions = other.PubsubOptions;
                    break;
                case OptionsOneofCase.KafkaOptions:
                    KafkaOptions = other.KafkaOptions;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Project = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Topic = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            RequestRate = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            MessageSize = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            MaxOutstandingRequests = input.ReadInt32();
                            break;
                        }
                    case 50:
                        {
                            if (startTime_ == null)
                            {
                                startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                            }
                            input.ReadMessage(startTime_);
                            break;
                        }
                    case 58:
                        {
                            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
                            if (stopConditionsCase_ == StopConditionsOneofCase.TestDuration)
                            {
                                subBuilder.MergeFrom(TestDuration);
                            }
                            input.ReadMessage(subBuilder);
                            TestDuration = subBuilder;
                            break;
                        }
                    case 64:
                        {
                            NumberOfMessages = input.ReadInt32();
                            break;
                        }
                    case 74:
                        {
                            global::Google.Pubsub.Loadtest.PubsubOptions subBuilder = new global::Google.Pubsub.Loadtest.PubsubOptions();
                            if (optionsCase_ == OptionsOneofCase.PubsubOptions)
                            {
                                subBuilder.MergeFrom(PubsubOptions);
                            }
                            input.ReadMessage(subBuilder);
                            PubsubOptions = subBuilder;
                            break;
                        }
                    case 82:
                        {
                            global::Google.Pubsub.Loadtest.KafkaOptions subBuilder = new global::Google.Pubsub.Loadtest.KafkaOptions();
                            if (optionsCase_ == OptionsOneofCase.KafkaOptions)
                            {
                                subBuilder.MergeFrom(KafkaOptions);
                            }
                            input.ReadMessage(subBuilder);
                            KafkaOptions = subBuilder;
                            break;
                        }
                    case 88:
                        {
                            PublishBatchSize = input.ReadInt32();
                            break;
                        }
                    case 98:
                        {
                            if (burnInDuration_ == null)
                            {
                                burnInDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                            }
                            input.ReadMessage(burnInDuration_);
                            break;
                        }
                    case 106:
                        {
                            if (publishBatchDuration_ == null)
                            {
                                publishBatchDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                            }
                            input.ReadMessage(publishBatchDuration_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class StartResponse : pb::IMessage<StartResponse>
    {
        private static readonly pb::MessageParser<StartResponse> _parser = new pb::MessageParser<StartResponse>(() => new StartResponse());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StartResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartResponse(StartResponse other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartResponse Clone()
        {
            return new StartResponse(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as StartResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StartResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StartResponse other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

    }

    public sealed partial class PubsubOptions : pb::IMessage<PubsubOptions>
    {
        private static readonly pb::MessageParser<PubsubOptions> _parser = new pb::MessageParser<PubsubOptions>(() => new PubsubOptions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PubsubOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PubsubOptions()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PubsubOptions(PubsubOptions other) : this()
        {
            subscription_ = other.subscription_;
            maxMessagesPerPull_ = other.maxMessagesPerPull_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PubsubOptions Clone()
        {
            return new PubsubOptions(this);
        }

        /// <summary>Field number for the "subscription" field.</summary>
        public const int SubscriptionFieldNumber = 1;
        private string subscription_ = "";
        /// <summary>
        ///  The Cloud Pub/Sub subscription name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Subscription
        {
            get { return subscription_; }
            set
            {
                subscription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "max_messages_per_pull" field.</summary>
        public const int MaxMessagesPerPullFieldNumber = 2;
        private int maxMessagesPerPull_;
        /// <summary>
        ///  The maximum number of messages to pull which each request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxMessagesPerPull
        {
            get { return maxMessagesPerPull_; }
            set
            {
                maxMessagesPerPull_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PubsubOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PubsubOptions other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Subscription != other.Subscription) return false;
            if (MaxMessagesPerPull != other.MaxMessagesPerPull) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Subscription.Length != 0) hash ^= Subscription.GetHashCode();
            if (MaxMessagesPerPull != 0) hash ^= MaxMessagesPerPull.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Subscription.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Subscription);
            }
            if (MaxMessagesPerPull != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(MaxMessagesPerPull);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Subscription.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Subscription);
            }
            if (MaxMessagesPerPull != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMessagesPerPull);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PubsubOptions other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Subscription.Length != 0)
            {
                Subscription = other.Subscription;
            }
            if (other.MaxMessagesPerPull != 0)
            {
                MaxMessagesPerPull = other.MaxMessagesPerPull;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Subscription = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            MaxMessagesPerPull = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class KafkaOptions : pb::IMessage<KafkaOptions>
    {
        private static readonly pb::MessageParser<KafkaOptions> _parser = new pb::MessageParser<KafkaOptions>(() => new KafkaOptions());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KafkaOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KafkaOptions()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KafkaOptions(KafkaOptions other) : this()
        {
            broker_ = other.broker_;
            PollDuration = other.pollDuration_ != null ? other.PollDuration.Clone() : null;
            zookeeperIpAddress_ = other.zookeeperIpAddress_;
            replicationFactor_ = other.replicationFactor_;
            partitions_ = other.partitions_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KafkaOptions Clone()
        {
            return new KafkaOptions(this);
        }

        /// <summary>Field number for the "broker" field.</summary>
        public const int BrokerFieldNumber = 1;
        private string broker_ = "";
        /// <summary>
        ///  The network address of the Kafka broker.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Broker
        {
            get { return broker_; }
            set
            {
                broker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "poll_duration" field.</summary>
        public const int PollDurationFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Duration pollDuration_;
        /// <summary>
        ///  The length of time to poll for.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration PollDuration
        {
            get { return pollDuration_; }
            set
            {
                pollDuration_ = value;
            }
        }

        /// <summary>Field number for the "zookeeper_ip_address" field.</summary>
        public const int ZookeeperIpAddressFieldNumber = 3;
        private string zookeeperIpAddress_ = "";
        /// <summary>
        ///  The network address(es) of the Zookeeper host(s).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ZookeeperIpAddress
        {
            get { return zookeeperIpAddress_; }
            set
            {
                zookeeperIpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "replication_factor" field.</summary>
        public const int ReplicationFactorFieldNumber = 4;
        private int replicationFactor_;
        /// <summary>
        ///  The replication factor of the Kafka topic.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplicationFactor
        {
            get { return replicationFactor_; }
            set
            {
                replicationFactor_ = value;
            }
        }

        /// <summary>Field number for the "partitions" field.</summary>
        public const int PartitionsFieldNumber = 5;
        private int partitions_;
        /// <summary>
        ///  The number of partitions of the Kafka topic.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Partitions
        {
            get { return partitions_; }
            set
            {
                partitions_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as KafkaOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KafkaOptions other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Broker != other.Broker) return false;
            if (!object.Equals(PollDuration, other.PollDuration)) return false;
            if (ZookeeperIpAddress != other.ZookeeperIpAddress) return false;
            if (ReplicationFactor != other.ReplicationFactor) return false;
            if (Partitions != other.Partitions) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Broker.Length != 0) hash ^= Broker.GetHashCode();
            if (pollDuration_ != null) hash ^= PollDuration.GetHashCode();
            if (ZookeeperIpAddress.Length != 0) hash ^= ZookeeperIpAddress.GetHashCode();
            if (ReplicationFactor != 0) hash ^= ReplicationFactor.GetHashCode();
            if (Partitions != 0) hash ^= Partitions.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Broker.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Broker);
            }
            if (pollDuration_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(PollDuration);
            }
            if (ZookeeperIpAddress.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ZookeeperIpAddress);
            }
            if (ReplicationFactor != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(ReplicationFactor);
            }
            if (Partitions != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(Partitions);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Broker.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Broker);
            }
            if (pollDuration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PollDuration);
            }
            if (ZookeeperIpAddress.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ZookeeperIpAddress);
            }
            if (ReplicationFactor != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplicationFactor);
            }
            if (Partitions != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Partitions);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KafkaOptions other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Broker.Length != 0)
            {
                Broker = other.Broker;
            }
            if (other.pollDuration_ != null)
            {
                if (pollDuration_ == null)
                {
                    pollDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                PollDuration.MergeFrom(other.PollDuration);
            }
            if (other.ZookeeperIpAddress.Length != 0)
            {
                ZookeeperIpAddress = other.ZookeeperIpAddress;
            }
            if (other.ReplicationFactor != 0)
            {
                ReplicationFactor = other.ReplicationFactor;
            }
            if (other.Partitions != 0)
            {
                Partitions = other.Partitions;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Broker = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            if (pollDuration_ == null)
                            {
                                pollDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                            }
                            input.ReadMessage(pollDuration_);
                            break;
                        }
                    case 26:
                        {
                            ZookeeperIpAddress = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            ReplicationFactor = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            Partitions = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MessageIdentifier : pb::IMessage<MessageIdentifier>
    {
        private static readonly pb::MessageParser<MessageIdentifier> _parser = new pb::MessageParser<MessageIdentifier>(() => new MessageIdentifier());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MessageIdentifier> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageIdentifier()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageIdentifier(MessageIdentifier other) : this()
        {
            publisherClientId_ = other.publisherClientId_;
            sequenceNumber_ = other.sequenceNumber_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageIdentifier Clone()
        {
            return new MessageIdentifier(this);
        }

        /// <summary>Field number for the "publisher_client_id" field.</summary>
        public const int PublisherClientIdFieldNumber = 1;
        private long publisherClientId_;
        /// <summary>
        ///  The unique id of the client that published the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PublisherClientId
        {
            get { return publisherClientId_; }
            set
            {
                publisherClientId_ = value;
            }
        }

        /// <summary>Field number for the "sequence_number" field.</summary>
        public const int SequenceNumberFieldNumber = 2;
        private int sequenceNumber_;
        /// <summary>
        ///  Sequence number of the published message with the given publish_client_id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SequenceNumber
        {
            get { return sequenceNumber_; }
            set
            {
                sequenceNumber_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MessageIdentifier);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MessageIdentifier other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PublisherClientId != other.PublisherClientId) return false;
            if (SequenceNumber != other.SequenceNumber) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PublisherClientId != 0L) hash ^= PublisherClientId.GetHashCode();
            if (SequenceNumber != 0) hash ^= SequenceNumber.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PublisherClientId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(PublisherClientId);
            }
            if (SequenceNumber != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(SequenceNumber);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PublisherClientId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(PublisherClientId);
            }
            if (SequenceNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MessageIdentifier other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PublisherClientId != 0L)
            {
                PublisherClientId = other.PublisherClientId;
            }
            if (other.SequenceNumber != 0)
            {
                SequenceNumber = other.SequenceNumber;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            PublisherClientId = input.ReadInt64();
                            break;
                        }
                    case 16:
                        {
                            SequenceNumber = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CheckRequest : pb::IMessage<CheckRequest>
    {
        private static readonly pb::MessageParser<CheckRequest> _parser = new pb::MessageParser<CheckRequest>(() => new CheckRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CheckRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckRequest(CheckRequest other) : this()
        {
            duplicates_ = other.duplicates_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckRequest Clone()
        {
            return new CheckRequest(this);
        }

        /// <summary>Field number for the "duplicates" field.</summary>
        public const int DuplicatesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Pubsub.Loadtest.MessageIdentifier> _repeated_duplicates_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Pubsub.Loadtest.MessageIdentifier.Parser);
        private readonly pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier> duplicates_ = new pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier>();
        /// <summary>
        ///  Duplicate messages that should not be reported for throughput and latency.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier> Duplicates
        {
            get { return duplicates_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CheckRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CheckRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!duplicates_.Equals(other.duplicates_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= duplicates_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            duplicates_.WriteTo(output, _repeated_duplicates_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += duplicates_.CalculateSize(_repeated_duplicates_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CheckRequest other)
        {
            if (other == null)
            {
                return;
            }
            duplicates_.Add(other.duplicates_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            duplicates_.AddEntriesFrom(input, _repeated_duplicates_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class CheckResponse : pb::IMessage<CheckResponse>
    {
        private static readonly pb::MessageParser<CheckResponse> _parser = new pb::MessageParser<CheckResponse>(() => new CheckResponse());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CheckResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckResponse(CheckResponse other) : this()
        {
            bucketValues_ = other.bucketValues_.Clone();
            RunningDuration = other.runningDuration_ != null ? other.RunningDuration.Clone() : null;
            isFinished_ = other.isFinished_;
            receivedMessages_ = other.receivedMessages_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckResponse Clone()
        {
            return new CheckResponse(this);
        }

        /// <summary>Field number for the "bucket_values" field.</summary>
        public const int BucketValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<long> _repeated_bucketValues_codec
            = pb::FieldCodec.ForInt64(10);
        private readonly pbc::RepeatedField<long> bucketValues_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///  Histogram of latencies, each one a delta from the previous CheckResponse sent.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> BucketValues
        {
            get { return bucketValues_; }
        }

        /// <summary>Field number for the "running_duration" field.</summary>
        public const int RunningDurationFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Duration runningDuration_;
        /// <summary>
        ///  The duration from the start of the loadtest to its completion or now if is_finished is false.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration RunningDuration
        {
            get { return runningDuration_; }
            set
            {
                runningDuration_ = value;
            }
        }

        /// <summary>Field number for the "is_finished" field.</summary>
        public const int IsFinishedFieldNumber = 3;
        private bool isFinished_;
        /// <summary>
        ///  True if the load test has finished running.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsFinished
        {
            get { return isFinished_; }
            set
            {
                isFinished_ = value;
            }
        }

        /// <summary>Field number for the "received_messages" field.</summary>
        public const int ReceivedMessagesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Google.Pubsub.Loadtest.MessageIdentifier> _repeated_receivedMessages_codec
            = pb::FieldCodec.ForMessage(34, global::Google.Pubsub.Loadtest.MessageIdentifier.Parser);
        private readonly pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier> receivedMessages_ = new pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier>();
        /// <summary>
        ///  MessageIdentifiers of all received messages since the last Check
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier> ReceivedMessages
        {
            get { return receivedMessages_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CheckResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CheckResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!bucketValues_.Equals(other.bucketValues_)) return false;
            if (!object.Equals(RunningDuration, other.RunningDuration)) return false;
            if (IsFinished != other.IsFinished) return false;
            if (!receivedMessages_.Equals(other.receivedMessages_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= bucketValues_.GetHashCode();
            if (runningDuration_ != null) hash ^= RunningDuration.GetHashCode();
            if (IsFinished != false) hash ^= IsFinished.GetHashCode();
            hash ^= receivedMessages_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            bucketValues_.WriteTo(output, _repeated_bucketValues_codec);
            if (runningDuration_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(RunningDuration);
            }
            if (IsFinished != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(IsFinished);
            }
            receivedMessages_.WriteTo(output, _repeated_receivedMessages_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += bucketValues_.CalculateSize(_repeated_bucketValues_codec);
            if (runningDuration_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunningDuration);
            }
            if (IsFinished != false)
            {
                size += 1 + 1;
            }
            size += receivedMessages_.CalculateSize(_repeated_receivedMessages_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CheckResponse other)
        {
            if (other == null)
            {
                return;
            }
            bucketValues_.Add(other.bucketValues_);
            if (other.runningDuration_ != null)
            {
                if (runningDuration_ == null)
                {
                    runningDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                RunningDuration.MergeFrom(other.RunningDuration);
            }
            if (other.IsFinished != false)
            {
                IsFinished = other.IsFinished;
            }
            receivedMessages_.Add(other.receivedMessages_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    case 8:
                        {
                            bucketValues_.AddEntriesFrom(input, _repeated_bucketValues_codec);
                            break;
                        }
                    case 18:
                        {
                            if (runningDuration_ == null)
                            {
                                runningDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                            }
                            input.ReadMessage(runningDuration_);
                            break;
                        }
                    case 24:
                        {
                            IsFinished = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            receivedMessages_.AddEntriesFrom(input, _repeated_receivedMessages_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ExecuteRequest : pb::IMessage<ExecuteRequest>
    {
        private static readonly pb::MessageParser<ExecuteRequest> _parser = new pb::MessageParser<ExecuteRequest>(() => new ExecuteRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExecuteRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecuteRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecuteRequest(ExecuteRequest other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecuteRequest Clone()
        {
            return new ExecuteRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ExecuteRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ExecuteRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ExecuteRequest other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

    }

    public sealed partial class ExecuteResponse : pb::IMessage<ExecuteResponse>
    {
        private static readonly pb::MessageParser<ExecuteResponse> _parser = new pb::MessageParser<ExecuteResponse>(() => new ExecuteResponse());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExecuteResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Pubsub.Loadtest.LoadtestReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecuteResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecuteResponse(ExecuteResponse other) : this()
        {
            latencies_ = other.latencies_.Clone();
            receivedMessages_ = other.receivedMessages_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExecuteResponse Clone()
        {
            return new ExecuteResponse(this);
        }

        /// <summary>Field number for the "latencies" field.</summary>
        public const int LatenciesFieldNumber = 1;
        private static readonly pb::FieldCodec<long> _repeated_latencies_codec
            = pb::FieldCodec.ForInt64(10);
        private readonly pbc::RepeatedField<long> latencies_ = new pbc::RepeatedField<long>();
        /// <summary>
        ///  Latencies of the completed operations
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Latencies
        {
            get { return latencies_; }
        }

        /// <summary>Field number for the "received_messages" field.</summary>
        public const int ReceivedMessagesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Pubsub.Loadtest.MessageIdentifier> _repeated_receivedMessages_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Pubsub.Loadtest.MessageIdentifier.Parser);
        private readonly pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier> receivedMessages_ = new pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier>();
        /// <summary>
        ///  MessageIdentifiers of all received messages since the last Execute
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Pubsub.Loadtest.MessageIdentifier> ReceivedMessages
        {
            get { return receivedMessages_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ExecuteResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ExecuteResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!latencies_.Equals(other.latencies_)) return false;
            if (!receivedMessages_.Equals(other.receivedMessages_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= latencies_.GetHashCode();
            hash ^= receivedMessages_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            latencies_.WriteTo(output, _repeated_latencies_codec);
            receivedMessages_.WriteTo(output, _repeated_receivedMessages_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += latencies_.CalculateSize(_repeated_latencies_codec);
            size += receivedMessages_.CalculateSize(_repeated_receivedMessages_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ExecuteResponse other)
        {
            if (other == null)
            {
                return;
            }
            latencies_.Add(other.latencies_);
            receivedMessages_.Add(other.receivedMessages_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    case 8:
                        {
                            latencies_.AddEntriesFrom(input, _repeated_latencies_codec);
                            break;
                        }
                    case 18:
                        {
                            receivedMessages_.AddEntriesFrom(input, _repeated_receivedMessages_codec);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code