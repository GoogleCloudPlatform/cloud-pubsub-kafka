package com.google.pubsub.jms.light.consumer;

import com.google.cloud.pubsub.spi.v1.Subscriber;
import com.google.cloud.pubsub.spi.v1.SubscriptionAdminClient;
import com.google.pubsub.v1.PullResponse;
import com.google.pubsub.v1.PushConfig;
import com.google.pubsub.v1.ReceivedMessage;
import com.google.pubsub.v1.Subscription;
import com.google.pubsub.v1.SubscriptionName;
import com.google.pubsub.v1.TopicName;

import java.io.IOException;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.IllegalStateException;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;

/**
 * Default PubSub {@link MessageConsumer} abstraction.
 *
 * @author Raaja Prabhu U J
 */
public class PubSubMessageConsumer implements MessageConsumer {
  private static final Logger LOGGER = Logger.getLogger(PubSubMessageConsumer.class.getName());

  private final boolean isPush;
  private final String project;
  private final String topic;

  private boolean closed;
  private MessageListener messageListener;
  private Subscriber subscriber;
  private SubscriptionAdminClient subscriptionAdminClient;
  private Subscription subscription;

  /**
   * Default PubSub's message consumer constructor.
   * @param project name of a project to associate with JMS messages.
   * @param topic is the topic within a project to subscribe to.
   * @param isPush describes the message delivery method for the connection.
   */
  public PubSubMessageConsumer(String project, String topic, boolean isPush) throws JMSException {
    this.topic = topic;
    this.isPush = isPush;
    this.project = project;
    this.closed = true;
    if (!isPush) {
      createSubscriptionAdminClient();
    }
  }

  /**
   * jms.MessageConsumer implementation.
   */
  @Override
  public void close() {
    subscription = null;
    closed = true;
  }

  /**
   * Google pub/sub doesn't support timeouts, so we aren't handling it for now.
   */
  @Override
  public Message receive(long timeoutInMillis) throws JMSException {
    assertConsumerIsActive();
    assertNotPush();
    SubscriptionName subscriptionName = SubscriptionName.create(project, topic);
    PullResponse response = subscriptionAdminClient.pull(subscriptionName, true, 1);
    // TODO: convert PubSubMessage to JmsMessage and return it.
    for (ReceivedMessage message : response.getReceivedMessagesList()) {
      subscriptionAdminClient.acknowledge(subscriptionName, Collections.singletonList(message.getAckId()));
    }
    return null;
  }

  @Override
  public Message receive() throws JMSException {
    return receive(-1);
  }

  @Override
  public Message receiveNoWait() throws JMSException {
    return receive(0);
  }

  @Override
  public MessageListener getMessageListener() {
    return messageListener;
  }

  /**
   * TODO: Create a webhook for Google's pub/sub to push messages.
   */
  @Override
  public void setMessageListener(MessageListener messageListener) throws JMSException {
    assertConsumerIsActive();
    assertPush();
    if (messageListener.equals(this.messageListener)) {
      return;
    }
    this.messageListener = messageListener;
    this.closed = false;
  }

  @Override
  public String getMessageSelector() {
    return null;
  }


  private void assertConsumerIsActive() throws IllegalStateException {
    if (closed) {
      throw new IllegalStateException("This consumer has been closed!");
    }
  }

  private void assertPush() throws IllegalStateException {
    if (!isPush) {
      throw new IllegalStateException("This consumer is registered for pull-delivery of messages.");
    }
  }

  private void assertNotPush() throws IllegalStateException {
    if (isPush) {
      throw new IllegalStateException("This consumer is registered for push-delivery of messages.");
    }
  }

  private void createSubscriptionAdminClient() throws JMSException {
    try {
      TopicName topicName = TopicName.create(project, topic);
      SubscriptionName subscriptionName = SubscriptionName.create(project, topic);
      this.subscriptionAdminClient = SubscriptionAdminClient.create();
      this.subscription = subscriptionAdminClient
          .createSubscription(subscriptionName, topicName, PushConfig.getDefaultInstance(), 0);
    } catch (IOException e) {
      LOGGER.log(Level.SEVERE, "Can't create SubscriptionAdminClient.", e);
      throw new JMSException(e.getMessage());
    }
    this.closed = false;
  }
}
