// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Contains unreleased streaming pull functionalities only.

syntax = "proto3";

package google.pubsub.v1;

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "PubsubProto";
option java_package = "com.google.pubsub.v1";


service Subscriber {
  // Establishes a stream with the server, which sends messages down to the
  // client. The client streams acknowledgements and ack deadline modifications
  // back to the server. The server will close the stream and return the status
  // on any error. The server may close the stream with status `OK` to reassign
  // server-side resources, in which case, the client should re-establish the
  // stream. `UNAVAILABLE` may also be returned in the case of a transient error
  // (e.g., a server restart). These should also be retried by the client. Flow
  // control can be achieved by configuring the underlying RPC channel.
  rpc StreamingPull(stream StreamingPullRequest)
      returns (stream StreamingPullResponse) {
  }
}

// Request for the `StreamingPull` streaming RPC method. This request is used to
// establish the initial stream as well as to stream acknowledgements and ack
// deadline modifications from the client to the server.
message StreamingPullRequest {
  // The subscription for which to initialize the new stream. This must be
  // provided in the first request on the stream, and must not be set in
  // subsequent requests from client to server.
  // Format is `projects/{project}/subscriptions/{sub}`.
  string subscription = 1;

  // List of acknowledgement IDs for acknowledging previously received messages
  // (received on this stream or a different stream). If an ack ID has expired,
  // the corresponding message may be redelivered later. Acknowledging a message
  // more than once will not result in an error. If the acknowledgement ID is
  // malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
  repeated string ack_ids = 2;

  // The list of new ack deadlines for the IDs listed in
  // `modify_deadline_ack_ids`. The size of this list must be the same as the
  // size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
  // with `INVALID_ARGUMENT`. Each element in this list is applied to the
  // element in the same position in `modify_deadline_ack_ids`. The new ack
  // deadline is with respect to the time this request was sent to the Pub/Sub
  // system. Must be >= 0. For example, if the value is 10, the new ack deadline
  // will expire 10 seconds after this request is received. If the value is 0,
  // the message is immediately made available for another streaming or
  // non-streaming pull request. If the value is < 0 (an error), the stream will
  // be aborted with status `INVALID_ARGUMENT`.
  repeated int32 modify_deadline_seconds = 3;

  // List of acknowledgement IDs whose deadline will be modified based on the
  // corresponding element in `modify_deadlines`. This field can be used to
  // indicate that more time is needed to process a message by the subscriber,
  // or to make the message available for redelivery if the processing was
  // interrupted.
  repeated string modify_deadline_ack_ids = 4;

  // The ack deadline to use for the stream. This must be provided in the
  // first request on the stream, but it can also be updated on subsequent
  // requests from client to server. The minimum deadline you can specify is 10
  // seconds. The maximum deadline you can specify is 600 seconds (10 minutes).
  int32 stream_ack_deadline_seconds = 5;
};

// A message data and its attributes. The message payload must not be empty;
// it must contain either a non-empty data field, or at least one attribute.
message PubsubMessage {
  // The message payload.
  bytes data = 1;

  // Optional attributes for this message. (-- This can be used to filter
  // messages on the subscription. --)
  map<string, string> attributes = 2;

  // ID of this message, assigned by the server when the message is published.
  // Guaranteed to be unique within the topic. This value may be read by a
  // subscriber that receives a `PubsubMessage` via a `Pull` call or a push
  // delivery. It must not be populated by the publisher in a `Publish` call.
  string message_id = 3;

  // The time at which the message was published, populated by the server when
  // it receives the `Publish` call. It must not be populated by the
  // publisher in a `Publish` call.
  google.protobuf.Timestamp publish_time = 4;
}

// A message and its corresponding acknowledgment ID.
message ReceivedMessage {
  // This ID can be used to acknowledge the received message.
  string ack_id = 1;

  // The message.
  PubsubMessage message = 2;
}

// Response for the `StreamingPull` method. This response is used to stream
// messages from the server to the client.
message StreamingPullResponse {
  // Received Pub/Sub messages. This will not be empty.
  repeated ReceivedMessage received_messages = 1;
}
